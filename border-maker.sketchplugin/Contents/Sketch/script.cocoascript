var onMakeBorders = function(context) {
    var style = getStyle(context);
    if (style === null) {
        return;
    }

    var regularBorderColor;
    regularBorderColor = disableRegularBorders(style);

    var shadows = [style innerShadows];
    var borders = findBorders(shadows);

    var firstShadow = firstActiveInnerShadow(shadows);
    var borderColor;
    if (regularBorderColor != null) {
        borderColor = regularBorderColor;
    }
    else if (firstShadow != null) {
        borderColor = [firstShadow color];
    }
    else {
        borderColor = [MSColor rgbColorRed: 128 green: 128 blue: 128];
    }

    // Create borders that aren't already present
    if (borders.left == null) {
        borders.left = makePart(1, 0, style, borderColor);
    }
    if (borders.bottom == null) {
        borders.bottom = makePart(0, -1, style, borderColor);
    }
    if (borders.right == null) {
        borders.right = makePart(-1, 0, style, borderColor);
    }
    if (borders.top == null) {
        borders.top = makePart(0, 1, style, borderColor);
    }

    // Set the order of the borders. 0 = bottom of the list
    moveInnerShadowToIndex(style, borders.top,    3);
    moveInnerShadowToIndex(style, borders.right,  2);
    moveInnerShadowToIndex(style, borders.bottom, 1);
    moveInnerShadowToIndex(style, borders.left,   0);

    context.document.reloadInspector();
};

var onUpdateColors = function(context) {
    var style = getStyle(context);
    if (style === null) {
        return;
    }
    var shadows = [style innerShadows];

    var firstShadow = firstActiveInnerShadow(shadows);

    if (firstShadow != null) {
        borderColor = [firstShadow color];
        var borders = findBorders(shadows);

        if (borders.top != null) {
            borders.top.setColor(borderColor)
        }
        if (borders.right != null) {
            borders.right.setColor(borderColor);
        }
        if (borders.bottom != null) {
            borders.bottom.setColor(borderColor);
        }
        if (borders.left != null) {
            borders.left.setColor(borderColor);
        }

        context.document.reloadInspector();
    }
    else {
        var doc = context.document;
        [doc showMessage: "Selected object doesn't have any inner shadow borders."];
    }

    
}

function getStyle(context) {
    var selection = context.selection;
    if (selection.length != 1) {
        var doc = context.document;
        [doc showMessage: "Select one object"];
        return null;
    }

    var item = selection[0];
    var style = [item style];

    return style;
}

// Turn off any items in the "borders" section
function disableRegularBorders(style) {
    var borders = style.enabledBorders();
    var firstBorderColor;

    for (var idx = 0; idx < borders.length; idx++) {
        var currBorder = borders[idx];
        [currBorder setIsEnabled: false];

        if (firstBorderColor == null) {
            firstBorderColor = [currBorder color];
        }
    }

    return firstBorderColor;
}

function moveInnerShadowToIndex(style, innerShadow, newIdx) {
    var shadows = [style innerShadows];

    var currIdx = [shadows indexOfObject: innerShadow];

    [style moveStyleInnerShadowIndex: currIdx toIndex: newIdx];    
}

function findBorders(shadows) {
    var borders = {};
    for (var idx = 0; idx < shadows.length; idx++) {
        var currShadow = shadows[idx];

        if (currShadow.blurRadius() != 0.0 || currShadow.spread() != 0.0) {
            continue;
        }

        if (currShadow.offsetX() == 0.0 && currShadow.offsetY() == 1.0) {
            borders.top = currShadow;
        }
        if (currShadow.offsetX() == -1.0 && currShadow.offsetY() == 0.0) {
            borders.right = currShadow;
        }
        if (currShadow.offsetX() == 0.0 && currShadow.offsetY() == -1.0) {
            borders.bottom = currShadow;
        }
        if (currShadow.offsetX() == 1.0 && currShadow.offsetY() == 0.0) {
            borders.left = currShadow;
        }
    }
    return borders;
}

function makePart(x, y, style, borderColor) {
    var newPart = style.addStylePartOfType(3); // 3 = inner shadow
    [newPart setSpread: 0];
    [newPart setBlurRadius: 0];
    [newPart setOffsetX: x];
    [newPart setOffsetY: y];
    [newPart setColor: borderColor];

    return newPart;
}

function firstActiveInnerShadow(shadows) {
    // First item in the UI is last in the array
    for (var idx = shadows.length - 1; idx >= 0; idx--) {
        var currShadow = shadows[idx];

        if (currShadow.blurRadius() != 0.0 || currShadow.spread() != 0.0) {
            continue;
        }

        if (currShadow.isEnabled()) {
            return currShadow;
        }
    }

    return null;
}